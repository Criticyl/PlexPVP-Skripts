options:
    merchant: &d&lBLACKSMITH &8»

on load:
    set {pickaxe-booster} to 1 if {pickaxe-booster} = 0
    set {sword-booster} to 1 if {sword-booster} = 0

function getPickaxe(level: number) :: item:
    set {_nbt} to "{level: %{_level}%, experience: 0}"
    set {_pickaxe} to getPickaxeType({_level}) with nbt {_nbt} with no nbt
    set {_pickaxe} to {_pickaxe} named getPickaxeName({_level})
    set {_maxExperience} to getPickaxeMaxExperience({_level})
    set {_efficiency} to floor((mod({_level} - 1, 10) + 1) / 2)
    set {_lore::*} to getPickaxeLore(0, {_maxExperience})
    loop size of {_lore::*} times:
        set line loop-number of lore of {_pickaxe} to {_lore::%loop-number%}

    evaluate "enchant {_pickaxe} with efficiency %{_efficiency}%" if {_efficiency} > 0

    return {_pickaxe}

function getPickaxeLore(experience: number, maxExperience: number) :: strings:
    set {_lore::*} to "" and "%getPickaxeBar({_experience}, {_maxExperience}, 20)% &8(&7%{_experience}%&8/&7%{_maxExperience}%&8)" and ""
    return {_lore::*}

function getPickaxeBar(x: number, y: number, length: number) :: string:
    set {_progress} to floor({_x} / {_y} * {_length})
    set {_bar} to "&8["
    loop {_progress} times:
        set {_bar} to "%{_bar}%&d|"
    loop {_length} - {_progress} times:
        set {_bar} to "%{_bar}%&7|"
    return "%{_bar}%&8]"

function getPickaxeType(level: number) :: item type:
    if {_level} <= 0:
        return air
    else if {_level} <= 10:
        return wooden pickaxe
    else if {_level} <= 20:
        return stone pickaxe
    else if {_level} <= 30:
        return iron pickaxe
    else if {_level} <= 40:
        return diamond pickaxe
    else if {_level} <= 50:
        return netherite pickaxe
    return air

function getPickaxeName(level: number) :: string:
    if {_level} <= 0:
        return "&cBroken <= 0"
    else if {_level} <= 10:
        return "&7Wooden Pickaxe &8[&d%{_level}%&8]"
    else if {_level} <= 20:
        return "&7Stone Pickaxe &8[&d%{_level}%&8]"
    else if {_level} <= 30:
        return "&7Iron Pickaxe &8[&d%{_level}%&8]"
    else if {_level} <= 40:
        return "&7Diamond Pickaxe &8[&d%{_level}%&8]"
    else if {_level} <= 50:
        return "&7Netherite Pickaxe &8[&d%{_level}%&8]"
    else:
        return "&cBroken > 50"


function getBlockExperience(block: block) :: number:
    if {_block} = stone:
        return 1*{pickaxe-booster}
    else if {_block} = coal ore:
        return 2*{pickaxe-booster}
    else if {_block} = iron ore:
        return 5*{pickaxe-booster}
    else if {_block} = gold ore:
        return 10*{pickaxe-booster}
    else if {_block} = diamond ore:
        return 15*{pickaxe-booster}
    else if {_block} = obsidian:
        return 30*{pickaxe-booster}
    else:
        return 0

function canDestroy(tool: item, block: block) :: boolean:
    if {_block} != stone or coal ore or iron ore or gold ore or diamond ore or obsidian:
        return false
    else if {_tool} = wooden pickaxe:
        {_block} != stone or coal ore
        return false
    else if {_tool} = stone pickaxe:
        {_block} != stone or coal ore or iron ore
        return false
    else if {_tool} = iron pickaxe:
        {_block} != stone or coal ore or iron ore or gold ore
        return false
    else if {_tool} = diamond pickaxe:
        {_block} != stone or coal ore or iron ore or gold ore or diamond ore
        return false
    return true
 
function getBlockDrops(tool: item, block: block) :: items:
    if canDestroy({_tool}, {_block}):
        if {_block} = iron ore:
            return iron ingot
        else if {_block} = gold ore:
            return gold ingot
        else if {_block} = coal ore:
            return coal
        else if {_block} = diamond ore:
            return diamond 
        else if {_block} = obsidian:
            return obsidian
        else if {_block} = stone:
            return cobblestone 
        else:
            return drops of {_block} using {_tool}
    else:
        return air

on mine:
    player's gamemode != creative:
        block is stone, coal ore, iron ore, gold ore, diamond ore or obsidian:
            "%region at block%" contains "mine" or "caverns":
                set {_int} to a random number between 1.6 and 1.9
                play sound "entity.arrow.hit_player" at pitch {_int} at player for player
                chance of 2%:
                    play sound "entity.player.levelup" at player for player
                    give player {gift}
                    send "&d&lGIFT! &7You found a &dgift &7while mining! Use at the &dgift box!" to player
                
on break:
    set {_block} to type of block
    player's gamemode != creative
    if "%region at block%" does not contain "mine" or "caverns":
        cancel event
        stop
    if player's tool is air:
        set event-block to event-block
        cancel event
        stop
    if player's tool is not a pickaxe:
        set event-block to event-block
        cancel event
        stop
    if !canDestroy(tool, block):
        cancel event
 
        if block = iron ore:
            send action bar "&cYou need a &7Stone Pickaxe &8[&d1&8] &cto break this" to player
        else if block = gold ore:
            send action bar "&cYou need an &7Iron Pickaxe &8[&d1&8] &cto break this" to player
        else if block = diamond ore:
            send action bar "&cYou need a &7Diamond Pickaxe &8[&d1&8] &cto break this" to player
        else if block = obsidian:
            send action bar "&cYou need a &7Netherite Pickaxe &8[&d1&8] &cto break this" to player
    else:
        cancel drops
        give player getBlockDrops(tool, block)
        player's tool is a pickaxe

        set {_level} to tag "level" of tool's nbt
        set {_experience} to tag "experience" of tool's nbt
        set {_maxExperience} to getPickaxeMaxExperience({_level})
        
        if {_experience} + getBlockExperience(block) >= {_maxExperience}:
            add getBlockExperience(block) to {_experience}
            {_experience} = {_maxExperience}
            send ""
            send "&d&lBLACKSMITH &8» &7Your pickaxe is ready to be upgraded!"
            send ""

            if "%region at block%" contains "caverns":
                cancel event
                play sound "entity.player.levelup" at pitch 0.8 at player for player
                set block to bedrock
                wait 3 seconds
                set block to {_block}

            else:
                play sound "entity.chicken.egg" at pitch 0.8 at player for player

                set {_x} to 1

                loop 3 times:
                    set {_x} to {_x} + 0.2
                    play sound "entity.arrow.hit_player" at pitch {_x} at player for player
                    wait 4 ticks

        add getBlockExperience(block) to {_experience}
        set {_experience} to min({_experience}, {_maxExperience})
        add "{level: %{_level}%, experience: %{_experience}%}" to tool's nbt
        set {_lore::*} to getPickaxeLore({_experience}, {_maxExperience})
        loop size of {_lore::*} times:
            set line loop-number of lore of tool to {_lore::%loop-number%}

        if "%region at block%" contains "caverns":
            cancel event
            set block to bedrock
            wait 3 seconds
            set block to {_block}
        recalculateLevel(player)

on experience spawn:
    cancel event

function getPickaxeUpgradeCost(level: number) :: number:
    return ((ceil(({_level} * 20 / 10)) * 10) + 60) ? 1

function getPickaxeMaxExperience(level: number) :: number:
    if {_level} >= 15:
        return ceil({_level} * {_level} * 9.2)
    else:
        return ceil({_level} * {_level} * 7.8)

function upgradePickaxe(player: player, tool: item):
    set {_uuid} to uuid of {_player}
    if {_player}'s tool != pickaxe:
        send "{@merchant} &7You cannot upgrade this!" to {_player}
        play sound "entity.villager.no" with volume 1 and pitch 0.8 at {_player} for {_player}
    else:    
        set {_level} to tag "level" of {_tool}'s nbt
        set {_experience} to tag "experience" of {_tool}'s nbt
        set {_maxExperience} to getPickaxeMaxExperience({_level})
        send "BLACKSMITH PICK: %{_player}% upgraded a %{_player}'s held item% to a %{_level} + 1% pick!" to console
        if nbt of {_tool} does not contain "experience":
            send "{@merchant} &7You cannot upgrade this!" to {_player}
            play sound "entity.villager.no" with volume 1 and pitch 0.8 at {_player} for {_player}
        else if {_level} >= 50:
            send "{@merchant} &7You cannot upgrade this anymore!" to {_player}
            play sound "entity.villager.no" with volume 1 and pitch 0.8 at {_player} for {_player}
        else if {_experience} != {_maxExperience}:
            send "{@merchant} &7Your pickaxe is not ready to be upgraded yet!" to {_player}
            play sound "entity.villager.no" with volume 1 and pitch 0.8 at {_player} for {_player}
        else if {_player}'s balance < getPickaxeUpgradeCost({_level}):
            send "{@merchant} &7You need &d$%getPickaxeUpgradeCost({_level})%&7 to upgrade this!" to {_player}
            play sound "ui.button.click" at {_player} for {_player}
        else if {_player}'s inventory does not contain {_tool}:
            send "{@merchant} &7Your inventory no longer contains your pickaxe!" to {_player}
            play sound "entity.villager.no" with volume 1 and pitch 0.8 at {_player} for {_player}
        else:
            remove getPickaxeUpgradeCost({_level}) from {_player}'s balance
            remove {_tool} from {_player}
            give {_player} getPickaxe({_level} + 1)
            send "{@merchant} &7You upgraded your pickaxe!" to {_player}
            play sound "entity.player.levelup" with volume 1 and pitch 2 at {_player} for {_player}

on right click on player:
    uncolored name of entity = "RIGHT CLICK"
    block 2 meters below entity = beacon
    cancel event
    openMerchantGui(player, (player's tool))

function openMerchantGui(player: player, tool: item):
    open virtual chest inventory with size 3 named "Blacksmith" to {_player}
    format gui slot 0,1,2,3,4,5,6,7,8,9,10,12,14,16,17,18,19,20,21,22,23,24,25 and 26 of {_player} with air to do nothing
    play sound "entity.chicken.egg" at pitch 0 at {_player} for {_player}

    set {_lore::*} to "" and "&7Upgrade your pickaxe or" and "&7purchase another pickaxe!" and "" and "&dClick to open!"
    format gui slot 13 of {_player} with glowing iron pickaxe named "&d&LPICKAXE MENU" with lore {_lore::*} with no nbt to run:
        openPickaxeGui({_player}, {_tool})
        play sound "ui.button.click" at {_player} for {_player}

    set {_lore::*} to "" and "&7Upgrade your sword or" and "&7purchase another sword!" and "" and "&dClick to open!"
    format gui slot 11 of {_player} with glowing diamond sword named "&d&LSWORD MENU" with lore {_lore::*} with no nbt to run:
        openSwordGui({_player}, {_tool})
        play sound "ui.button.click" at {_player} for {_player}

    set {_lore::*} to "" and "&7View all armor types" and "" and "&7You can upgrade armor" and "&7with mined materials!" and "" and "&dClick to view armor!"
    format gui slot 15 of {_player} with glowing iron chestplate named "&d&lARMOR UPGRADES" with lore {_lore::*} with no nbt to run:
        openArmor({_player})
        play sound "ui.button.click" at {_player} for {_player}

function openPickaxeGui(player: player, tool: item):
    open virtual chest inventory with size 3 named "Pickaxe Upgrade" to {_player}
    format gui slot 0,1,2,3,4,5,6,7,8,9,10,12,13,14,16,17,18,19,20,21,22,23,24,25 and 26 of {_player} with air to do nothing
    set {_lore::*} to "" and "&7Purchase a new, level &8[&d1&8]" and "&7pickaxe for &d$100" and "" and "&dClick to purchase!" and ""
    format gui slot 11 of {_player} with wooden pickaxe named "&dBuy Pickaxe" with lore {_lore::*} with no nbt to run function buyNewPickaxe({_player})

    if {_player}'s tool is pickaxe:
        if nbt of {_tool} contains "level":
            set {_level} to tag "level" of nbt of {_tool}
            if {_level} < 50:
                set {_experience} to tag "experience" of nbt of {_tool}
                set {_maxExperience} to getPickaxeMaxExperience({_level})

                set {_lore::*} to "" and "&7Your current level &8[&d%{_level}%&8] %getPickaxeBar({_experience}, {_maxExperience}, 10)%" and "" and "&7This upgrades your pickaxe" and "&7if you have enough" and "&7pickaxe XP and money!" and "" and "&7Cost: &d$%getPickaxeUpgradeCost({_level})%" and "" and "&dClick to upgrade!" and ""
                format gui slot 15 of {_player} with {_tool} named "&dPickaxe Upgrade" with lore {_lore::*} with no nbt to run function upgradePickaxe({_player}, {_tool})
            else:
                format gui slot 15 of {_player} with barrier named "&dPickaxe Upgrade" with lore "" and "&cYou cannot upgrade this pickaxe anymore!" and "" to do nothing
        else:
            format gui slot 15 of {_player} with barrier named "&dPickaxe Upgrade" with lore "" and "&cYou cannot upgrade this!" and "" to do nothing
    else:
        format gui slot 15 of {_player} with barrier named "&dPickaxe Upgrade" with lore "" and "&cYou are not holding a pickaxe to upgrade!" and "" to do nothing


